import streamlit as st
from PIL import Image
import numpy as np
import cv2
from streamlit_image_comparison import image_comparison
import random
from collections import deque, Counter

class ColorDetector:
    @staticmethod
    def detect_dominant_colors(img_array, num_colors=5):
        # Reshape the image to be a list of pixels
        pixels = img_array.reshape(-1, 3)
        
        # Use K-means to find dominant colors
        criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.2)
        _, labels, centers = cv2.kmeans(
            pixels.astype(np.float32), 
            num_colors, 
            None, 
            criteria, 
            10, 
            cv2.KMEANS_RANDOM_CENTERS
        )
        
        # Count occurrences of each color
        unique, counts = np.unique(labels, return_counts=True)
        color_frequencies = dict(zip(unique, counts))
        
        # Sort colors by frequency
        dominant_colors = [centers[i].astype(int) for i in sorted(color_frequencies, key=color_frequencies.get, reverse=True)]
        
        return dominant_colors

class Filter:
    @staticmethod
    def apply_gaussian_blur(img_array, kernel_size=15, sigmaX=15):
        return cv2.GaussianBlur(img_array, (kernel_size, kernel_size), sigmaX=sigmaX)

    @staticmethod
    def color2gray(img_array):
        return cv2.cvtColor(img_array, cv2.COLOR_BGR2GRAY)

    @staticmethod
    def emboss(img_array):
        kernel = np.array([[0, -1, -1], [1, 0, -1], [1, 1, 0]])
        return cv2.filter2D(img_array, -1, kernel)

    @staticmethod
    def bilateral(img_array, intensity=9):
        return cv2.bilateralFilter(img_array, intensity, 75, 75)

    @staticmethod
    def edge_detection(img_array):
        return cv2.Canny(img_array, 100, 200)

    @staticmethod
    def sepia(img_array):
        kernel = np.array([[0.272, 0.534, 0.131], [0.349, 0.686, 0.168], [0.393, 0.769, 0.189]])
        sepia_img = cv2.transform(img_array, kernel)
        return np.clip(sepia_img, 0, 255).astype(np.uint8)

    @staticmethod
    def pencil_sketch(img_array):
        sketch_gray, sketch_color = cv2.pencilSketch(img_array, sigma_s=20, sigma_r=0.1, shade_factor=0.01)
        return sketch_color
 
    @staticmethod
    def vivid(img_array):
        hsv = cv2.cvtColor(img_array, cv2.COLOR_BGR2HSV)
        hsv[:, :, 1] = np.clip(hsv[:, :, 1] * 1.3, 0, 255)  # Increase saturation
        return cv2.cvtColor(hsv, cv2.COLOR_HSV2BGR)

    @staticmethod
    def dream(img_array):
        return cv2.GaussianBlur(img_array, (21, 21), 10)

    @staticmethod
    def color_replace(img_array, original_color, replacement_color, tolerance=30):
        img_array = np.array(img_array)
        mask = np.all(np.abs(img_array - original_color) <= tolerance, axis=-1)

        # Convert colors to numpy arrays
        original_color = np.array(original_color)
        replacement_color = np.array(replacement_color)
        
        # Replace those pixels
        img_array[mask] = replacement_color
        
        return img_array

def main():
    st.title("🖼️ Advanced Image Processing App")
    
    # Sidebar for file upload and processing
    st.sidebar.header("Image Processing Toolkit")
    uploaded_file = st.sidebar.file_uploader(
        "Upload an Image", 
        type=["jpg", "png", "jpeg"], 
        help="Supports JPG, PNG, and JPEG formats"
    )

    if uploaded_file is not None:
        # Read image
        original_image = Image.open(uploaded_file)
        img_array = np.array(original_image.convert("RGB"))

        # Sidebar processing options
        processing_type = st.sidebar.selectbox(
            "Processing Category", 
            ["Image Filters", "Color Manipulation"]
        )

        if processing_type == "Image Filters":
            # Restore previous filter categories
            filter_category = st.sidebar.selectbox(
                "Choose Filter Category:", 
                ["General", "Instagram"]
            )

            filters = {
                "General": {
                    "Gaussian Blur": Filter.apply_gaussian_blur,
                    "Grayscale": Filter.color2gray,
                    "Emboss": Filter.emboss,
                    "Bilateral": Filter.bilateral,
                    "Edge Detection": Filter.edge_detection,
                    "Sepia": Filter.sepia,
                    "Pencil sketch": Filter.pencil_sketch
                },
                "Instagram": {
                    "Vivid": Filter.vivid,
                    "Dream": Filter.dream
                }
            }

            selected_filter = st.sidebar.selectbox(
                "Select a Filter:", 
                list(filters[filter_category].keys())
            )
            
            # Intensity slider for certain filters
            intensity = st.sidebar.slider("Adjust Intensity", 1, 100, 50) \
                if selected_filter in ["Gaussian Blur", "Bilateral"] else None

            if st.sidebar.button("Apply Filter"):
                # Get and apply filter
                filter_func = filters[filter_category][selected_filter]
                
                if selected_filter == "Gaussian Blur":
                    filtered_img = filter_func(
                        img_array, 
                        kernel_size=intensity if intensity % 2 == 1 else intensity + 1
                    )
                elif selected_filter == "Bilateral":
                    filtered_img = filter_func(img_array, intensity)
                else:
                    filtered_img = filter_func(img_array)
                
                # Compare images
                st.image(filtered_img, caption=f"Processed: {selected_filter}")

        if processing_type == "Color Manipulation":
            # Detect dominant colors
            dominant_colors = ColorDetector.detect_dominant_colors(img_array)
            
            # Display dominant colors
            st.sidebar.subheader("Top 5 Dominant Colors")
            for idx, color in enumerate(dominant_colors):
                st.sidebar.write(f"Color {idx + 1}: RGB{tuple(color)}")

            # Color replacement UI
            st.sidebar.subheader("Color Replacement")
            color_to_replace_index = st.sidebar.selectbox(
                "Select Color to Replace", 
                range(5), 
                format_func=lambda x: f"RGB{tuple(dominant_colors[x])}"
            )
            
            color_to_replace = dominant_colors[color_to_replace_index]
            
            # Color picker for replacement
            replacement_color = st.sidebar.color_picker("Choose Replacement Color")
            
            # Convert hex to RGB
            replacement_color_rgb = tuple(int(replacement_color[i:i+2], 16) for i in (1, 3, 5))

            # Tolerance slider
            tolerance = st.sidebar.slider("Color Similarity Tolerance", 1, 100, 30)
            
            if st.sidebar.button("Replace Color"):
                # Apply color replacement
                replaced_img = Filter.color_replace(
                    img_array.copy(), 
                    color_to_replace, 
                    replacement_color_rgb, 
                    tolerance
                )
                
                # Display results
                st.image(replaced_img, caption="Color Replaced Image")

        # Always show original image
        st.header("Original Image")
        st.image(original_image, use_column_width=True)

if __name__ == "__main__":
    main()

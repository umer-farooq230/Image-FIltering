import streamlit as st
from PIL import Image
import numpy as np
import cv2
from streamlit_image_comparison import image_comparison
import random
from collections import deque

class Filter:
    @staticmethod
    def apply_gaussian_blur(img_array, kernel_size=15, sigmaX=15):
        return cv2.GaussianBlur(img_array, (kernel_size, kernel_size), sigmaX=sigmaX)

    @staticmethod
    def color2gray(img_array):
        return cv2.cvtColor(img_array, cv2.COLOR_BGR2GRAY)

    @staticmethod
    def emboss(img_array):
        kernel = np.array([[0, -1, -1], [1, 0, -1], [1, 1, 0]])
        return cv2.filter2D(img_array, -1, kernel)

    @staticmethod
    def bilateral(img_array, intensity=9):
        return cv2.bilateralFilter(img_array, intensity, 75, 75)

    @staticmethod
    def edge_detection(img_array):
        return cv2.Canny(img_array, 100, 200)

    @staticmethod
    def sepia(img_array):
        kernel = np.array([[0.272, 0.534, 0.131], [0.349, 0.686, 0.168], [0.393, 0.769, 0.189]])
        sepia_img = cv2.transform(img_array, kernel)
        return np.clip(sepia_img, 0, 255).astype(np.uint8)

    @staticmethod
    def pencil_sketch(img_array):
    # cv2.pencilSketch returns two outputs: grayscale and color sketch
        sketch_gray, sketch_color = cv2.pencilSketch(img_array, sigma_s=20, sigma_r=0.1, shade_factor=0.01)
        return sketch_color
 
    @staticmethod
    def vivid(img_array):
        hsv = cv2.cvtColor(img_array, cv2.COLOR_BGR2HSV)
        hsv[:, :, 1] = np.clip(hsv[:, :, 1] * 1.3, 0, 255)  # Increase saturation
        return cv2.cvtColor(hsv, cv2.COLOR_HSV2BGR)

    @staticmethod
    def dream(img_array):
        return cv2.GaussianBlur(img_array, (21, 21), 10)

    @staticmethod
    def bfs_fill(img_array, start_pixel, color):
        height, width = img_array.shape[:2]
        visited = np.zeros((height, width), dtype=bool)
        queue = deque([start_pixel])
        while queue:
            x, y = queue.popleft()
            if visited[x, y]:
                continue
            visited[x, y] = True
            img_array[x, y] = color
            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
                nx, ny = x + dx, y + dy
                if 0 <= nx < height and 0 <= ny < width and not visited[nx, ny]:
                    queue.append((nx, ny))
        return img_array


st.title("Image Filtering App")
uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "png", "jpeg"])

if uploaded_file is not None:
    original_image = Image.open(uploaded_file)
    img_array = np.array(original_image.convert("RGB"))

    filter_category = st.selectbox("Choose Filter Category:", ["General", "Instagram"])

    filters = {
        "General": {
            "Gaussian Blur": Filter.apply_gaussian_blur,
            "Grayscale": Filter.color2gray,
            "Emboss": Filter.emboss,
            "Bilateral": Filter.bilateral,
            "Edge Detection": Filter.edge_detection,
            "Sepia": Filter.sepia,
            "Pencil sketch": Filter.pencil_sketch
        },
        "Instagram": {
            "Vivid": Filter.vivid,
            "Dream": Filter.dream
        }
    }

    selected_filter = st.selectbox("Select a Filter:", list(filters[filter_category].keys()))
    intensity = st.slider("Adjust Intensity", 1, 100, 50) if selected_filter in ["Gaussian Blur", "Bilateral"] else None
    selective_fill = st.checkbox("Apply Selective Fill")

    st.image(original_image, caption="Original Image", use_column_width=True)
    filter_func = filters[filter_category][selected_filter]     

    if st.button("Apply Filter"):
        if selected_filter == "Gaussian Blur":
            filtered_array = filter_func(img_array, kernel_size=intensity if intensity % 2 == 1 else intensity + 1)
        elif selected_filter == "Bilateral":
            filtered_array = filter_func(img_array, intensity)
        else:
            filtered_array = filter_func(img_array)

        if selective_fill:
            start_pixel = (random.randint(0, img_array.shape[0] - 1), random.randint(0, img_array.shape[1] - 1))
            selective_color = [random.randint(0, 255) for _ in range(3)]
            filtered_array = Filter.bfs_fill(filtered_array, start_pixel, selective_color)

        filtered_image = Image.fromarray(filtered_array)
        image_comparison(img1=original_image, img2=filtered_image, label1="Original", label2=selected_filter)

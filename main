import streamlit as st
from PIL import Image
import numpy as np
import cv2
from streamlit_image_comparison import image_comparison
import random


class Filter:

    @staticmethod
    def apply_gaussian_blur(img_array, kernel_size=15, sigmaX=15):
        return cv2.GaussianBlur(img_array, (kernel_size, kernel_size), sigmaX=sigmaX)


    @staticmethod
    def color2gray(img_array, intensity=np.arange(1,255,3)):
        return cv2.cvtColor(img_array, cv2.COLOR_BGR2GRAY)

    @staticmethod
    def emboss(img_array):
        kernel = np.array([[0, -1, -1],
                           [1, 0, -1],
                           [1, 1, 0]])
        return cv2.filter2D(img_array, -1, kernel)

    @staticmethod
    def bilateral(img_array, intensity=np.arange(1,255,3)):
        return cv2.bilateralFilter(img_array, intensity, 75, 75)

    @staticmethod
    def edge_detection(img_array):
        return cv2.Canny(img_array, 100, 200)

    @staticmethod
    def sepia(img_array, intensity=np.arange(1,255,3)):
        kernel = np.array([[0.272, 0.534, 0.131],
                           [0.349, 0.686, 0.168],
                           [0.393, 0.769, 0.189]])
        sepia_img = cv2.transform(img_array, kernel)
        return np.clip(sepia_img, 0, 255).astype(np.uint8)


st.title("Image Filtering App")

uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "png", "jpeg"])    


if uploaded_file is not None:
    original_image = Image.open(uploaded_file)
    img_array = np.array(original_image.convert("RGB"))

    filters = {
        "Gaussian Blur": {"func": Filter.apply_gaussian_blur, "intensity": True},
        "Grayscale": {"func": Filter.color2gray, "intensity": True},
        "Emboss": {"func": Filter.emboss, "intensity": False},
        "Bilateral": {"func": Filter.bilateral, "intensity": True},
        "Edge Detection": {"func": Filter.edge_detection, "intensity": False},
        "Sepia": {"func": Filter.sepia, "intensity": True}
    }

    st.image(original_image, caption="Original Image", use_column_width=True)
    
    
    for filter_name, filter_info in filters.items():
        col1, col2 = st.columns([1, 4])
    
        if filter_info["intensity"]:
            if filter_name == "Gaussian Blur":
                sigmaX = st.slider(f"{filter_name} Intensity:", 0, 255, 15, key=f"{filter_name}_sigma")
                kernel_size = st.slider(f"Degree of {filter_name} Blurring:", 1, 51, 15, step=2, key=f"{filter_name}_kernel")
                preview_img = filter_info["func"](img_array, kernel_size=kernel_size, sigmaX=sigmaX)
            else:
                intensity = st.slider(f"{filter_name} Intensity:", 1, 50, 3, key=filter_name)
                preview_img = filter_info["func"](img_array, intensity)
        else:
            preview_img = filter_info["func"](img_array)
    
    
        if len(preview_img.shape) == 2:
            preview_img = np.stack([preview_img] * 3, axis=-1)
    
        preview_image = Image.fromarray(preview_img).resize((100, 80))
    
        with col1:
            st.image(preview_image, caption=f"{filter_name} Preview")
    
        with col2:
            if st.button(f"Apply {filter_name}", key=f"button_{filter_name}"):
                if filter_name == "Gaussian Blur":
                    filtered_array = filter_info["func"](img_array, kernel_size=kernel_size, sigmaX=sigmaX)
                elif filter_info["intensity"]:
                    filtered_array = filter_info["func"](img_array, intensity)
                else:
                    filtered_array = filter_info["func"](img_array)
    
                filtered_image = Image.fromarray(filtered_array)
                image_comparison(img1=original_image, img2=filtered_image, label1="Original", label2=filter_name)
    

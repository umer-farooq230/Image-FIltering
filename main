import customtkinter as ctk
from PIL import Image, ImageTk
import numpy as np
import cv2


ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")


img_array = None
original_image = None
filtered_image = None  

# Filters Class
class Filter:
    @staticmethod
    def apply_gaussian_blur(img_array, kernel_size=15, sigmaX=15):
        return cv2.GaussianBlur(img_array, (kernel_size, kernel_size), sigmaX=sigmaX)

    @staticmethod
    def color2gray(img_array):
        return cv2.cvtColor(img_array, cv2.COLOR_BGR2GRAY)

    @staticmethod
    def emboss(img_array):
        kernel = np.array([[0, -1, -1], [1, 0, -1], [1, 1, 0]])
        return cv2.filter2D(img_array, -1, kernel)

    @staticmethod
    def bilateral(img_array, intensity=9):
        return cv2.bilateralFilter(img_array, intensity, 75, 75)

    @staticmethod
    def edge_detection(img_array):
        return cv2.Canny(img_array, 100, 200)

    @staticmethod
    def sepia(img_array):
        kernel = np.array([[0.272, 0.534, 0.131], [0.349, 0.686, 0.168], [0.393, 0.769, 0.189]])
        sepia_img = cv2.transform(img_array, kernel)
        return np.clip(sepia_img, 0, 255).astype(np.uint8)

    @staticmethod
    def pencil_sketch(img_array):
        sketch_gray, sketch_color = cv2.pencilSketch(img_array, sigma_s=20, sigma_r=0.1, shade_factor=0.01)
        return sketch_color

    @staticmethod
    def vivid(img_array):
        hsv = cv2.cvtColor(img_array, cv2.COLOR_BGR2HSV)
        hsv[:, :, 1] = np.clip(hsv[:, :, 1] * 1.3, 0, 255)
        return cv2.cvtColor(hsv, cv2.COLOR_HSV2BGR)

    @staticmethod
    def dream(img_array):
        return cv2.GaussianBlur(img_array, (21, 21), 10)


# Update Canvas
def update_canvas(image_array):
    global canvas, filtered_image
    filtered_image = image_array
    image = Image.fromarray(image_array)
    ctk_image = ctk.CTkImage(light_image=image, size=(600, 400))
    canvas.configure(image=ctk_image)
    canvas.image = ctk_image

def update_filters(category):
    filter_options = {
        "General": ["Gaussian Blur", "Grayscale", "Emboss", "Bilateral", "Edge Detection", "Sepia", "Pencil Sketch"],
        "Instagram": ["Vivid", "Dream"]
    }

    # Update the dropdown menu with relevant filter options
    filters.configure(values=filter_options.get(category, []))
    filters.set("Select a Filter")

# Apply Filter
def apply_filter(category, filter_name, intensity):
    global img_array, filtered_image
    if img_array is None:
        return

    # Use the original image for applying filters
    base_image = original_image if original_image is not None else img_array

    filters = {
        "General": {
            "Gaussian Blur": lambda img: Filter.apply_gaussian_blur(img, kernel_size=int(intensity)),
            "Grayscale": Filter.color2gray,
            "Emboss": Filter.emboss,
            "Bilateral": lambda img: Filter.bilateral(img, intensity=int(intensity)),
            "Edge Detection": Filter.edge_detection,
            "Sepia": Filter.sepia,
            "Pencil Sketch": Filter.pencil_sketch,
        },
        "Instagram": {
            "Vivid": Filter.vivid,
            "Dream": Filter.dream,
        }
    }

    try:
        selected_filter = filters[category][filter_name]
        if filtered_image is not None:
            filtered_image = selected_filter(filtered_image) 
        else:
            filtered_image = selected_filter(np.array(base_image.convert("RGB")))  
        update_canvas(filtered_image)
 
    except KeyError:
        pass


# Load Image
def load_image():
    global img_array, original_image, filtered_image
    file_path = ctk.filedialog.askopenfilename(
        filetypes=[("Image Files", "*.jpg;*.jpeg;*.png")]
    )
    if file_path:
        image = Image.open(file_path)
        original_image = image  
        img_array = np.array(image.convert("RGB"))
        filtered_image = None  
        update_canvas(img_array)


def reset_image():
    global original_image, filtered_image
    if original_image:
        filtered_image = None  
        update_canvas(np.array(original_image.convert("RGB")))


# Main Application
root = ctk.CTk()
root.title("Advanced Image Processing App")
root.geometry("1200x800")

# Sidebar
sidebar = ctk.CTkFrame(root, width=250)
sidebar.grid(row=0, column=0, sticky="nsew")

# Sidebar Layout
sidebar.grid_rowconfigure(0, weight=1)
sidebar.grid_rowconfigure(1, weight=4)
sidebar.grid_rowconfigure(2, weight=1)

# Image Upload
upload_button = ctk.CTkButton(
    sidebar, text="Upload Image", command=load_image
)
upload_button.grid(row=0, column=0, pady=20, padx=20)

# Filter Options
category_label = ctk.CTkLabel(sidebar, text="Filter Category")
category_label.grid(row=1, column=0, sticky="n", pady=10)

filter_category = ctk.CTkOptionMenu(
    sidebar, values=["General", "Instagram"], command=lambda val: update_filters(val)
)
filter_category.grid(row=2, column=0, pady=10)

filters = ctk.CTkOptionMenu(sidebar, values=["Select a Filter"])
filters.grid(row=3, column=0, pady=10)

intensity_slider = ctk.CTkSlider(sidebar, from_=1, to=100)
intensity_slider.set(50)
intensity_slider.grid(row=4, column=0, pady=10)

apply_button = ctk.CTkButton(
    sidebar, text="Apply Filter", command=lambda: apply_filter(
        filter_category.get(), filters.get(), intensity_slider.get()
    )
)
apply_button.grid(row=5, column=0, pady=10)

reset_button = ctk.CTkButton(
    sidebar, text="Reset Image", command=reset_image
)
reset_button.grid(row=6, column=0, pady=10)

# Main Canvas
main_frame = ctk.CTkFrame(root)
main_frame.grid(row=0, column=1, sticky="nsew")
canvas = ctk.CTkLabel(main_frame, text="")
canvas.pack(fill="both", expand=True)

root.grid_columnconfigure(1, weight=1)
root.mainloop()
